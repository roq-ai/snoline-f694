generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model client {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name        String            @db.VarChar(100)
  last_name         String            @db.VarChar(100)
  contact_number    String?           @db.VarChar(15)
  email_id          String?           @unique @db.VarChar(100)
  preferred_service String            @db.Uuid
  created_at        DateTime          @default(now()) @db.Timestamp(6)
  updated_at        DateTime          @default(now()) @db.Timestamp(6)
  service           service           @relation(fields: [preferred_service], references: [id], onDelete: Cascade, onUpdate: NoAction)
  service_request   service_request[]
}

model organization {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description    String?   @db.VarChar(255)
  service_charge Int?
  service_type   String?   @db.VarChar(100)
  name           String    @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  user_id        String    @db.Uuid
  tenant_id      String    @db.VarChar(255)
  user           user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  service        service[]
  team           team[]
}

model service {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(100)
  description     String?           @db.VarChar(255)
  charge          Int?
  organization_id String            @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  client          client[]
  organization    organization      @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  service_request service_request[]
  team            team[]
}

model service_request {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id      String    @db.Uuid
  service_id     String    @db.Uuid
  status         String?   @db.VarChar(50)
  requested_date DateTime? @db.Date
  completed_date DateTime? @db.Date
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  client         client    @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  service        service   @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model team {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String       @db.Uuid
  user_id         String       @db.Uuid
  role            String?      @db.VarChar(50)
  expertise       String?      @db.VarChar(100)
  service_id      String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  service         service      @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
  team         team[]
}
